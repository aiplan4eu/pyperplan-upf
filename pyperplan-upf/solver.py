# Copyright 2021 AIPlan4EU project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import subprocess
import re
import upf
from upf.problem_kind import ProblemKind
from upf.io.pddl_writer import PDDLWriter
from upf.exception import UPFException


class SolverImpl(upf.Solver):
    def __init__(self, weight=None, heuristic=None, **options):
        pass

    def solve(self, problem):
        pddl_writer = PDDLWriter(problem)
        pddl_writer.write_domain("pyperplan_domain.pddl")
        pddl_writer.write_problem("pyperplan_problem.pddl")
        cmd = "python3 pyperplan.py pyperplan_domain.pddl pyperplan_problem.pddl"
        res = subprocess.run(cmd, capture_output=True)

        if not os.path.isfile("pyperplan_problem.pddl.soln"):
            print(res.stderr.decode())
        else:
            plan = self._plan_from_file(problem, "pyperplan_problem.pddl.soln")

        return plan


    def _plan_from_file(self, problem: 'upf.Problem', plan_filename: str) -> 'upf.Plan':
        actions = []
        with open(plan_filename) as plan:
            for line in plan.readlines():
                if re.match(r'^\s*(;.*)?$', line):
                    continue
                res = re.match(r'^\s*\(\s*([\w?-]+)((\s+[\w?-]+)*)\s*\)\s*$', line)
                if res:
                    action = problem.action(res.group(1))
                    parameters = []
                    for p in res.group(2).split():
                        parameters.append(problem._env._expression_manager.ObjectExp(problem.object(p)))
                    actions.append(upf.ActionInstance(action, tuple(parameters)))
                else:
                    raise UPFException('Error parsing plan generated by ' + self.__class__.__name__)
        return upf.SequentialPlan(actions)



    @staticmethod
    def supports(problem_kind):
        supported_kind = ProblemKind()
        return problem_kind.features().issubset(supported_kind.features())

    @staticmethod
    def is_oneshot_planner():
        return True

    def destroy(self):
        pass
